@using ChatGPTChatBot.Data
@using ChatGPTChatBot.Persistence
@using ChatGPTChatBot.Persistence.Interface
@using Newtonsoft.Json;
@using System.Text;
@inject IJSRuntime JSRuntime;
@inject ILocalStorageService _localstorage;

@page "/"

<PageTitle>Chatbot</PageTitle>
<div class="container">
    <div class="row">
        <div class="col-4 bg-light">
            <h2>Projeto TCC - Unicarioca</h2>
            <p>Este projeto se trata de um ChatBot que utiliza a API do ChatGPT (gpt-3.5-turbo). A ideia do projeto é a criação de um 'assistente'
                para um atendimento médico. Um chat com uma inteligência artificial que pode fazer um <i>briefing</i> para auxiliar um profissional
                de saúde a fazer um diagnostico e tratamento.
            </p>
            <hr class="my-4"/>
            <p>
                O uso da API é cobrado por requisição, para mais informações, acesse o <i>link</i>:
                <a href="https://platform.openai.com/docs/api-reference">https://platform.openai.com/docs/api-reference</a>.</p>
            <p>Caso possua uma API Key, insira-a no campo abaixo, para poder fazer as chamadas ao ChatBot:</p>

            @if(apiKey == null || apiKey == "")
            {
                <div class="input-group" id="AddKey">
                    <input type="password" id="ApiSecretKey" autocomplete="false" name="hidden" class="form-control" placeholder="Digite sua API Secret Key" @bind="apiKey" aria-label="Digite sua API Secret Key">
                    <button class="btn btn-primary" @onclick="SetApikey">Confirmar</button>
                </div>
            }
            else
            {
                <div class="input-group" id="ChangeKey">
                    <input disabled type="password" id="ApiSecretKey" class="form-control" @bind="apiKey" aria-label="Digite sua API Secret Key">
                    <button class="btn btn-outline-primary" @onclick="ChangeApiKey">Alterar</button>
                </div>
            }
            @if (isShow)
            {
                <div class="alert-danger px-2">
                    <strong>Erro: </strong>@ErrorMessage
                </div>
            }
        </div>
        <div class="col-6 bg-light">
            <div class="messages">
                <div class="question">
                    The quick brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog
                </div>
                <div class="response">
                    The quick brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog
                </div>

                @for (int i = 0; i < mensagens.Count; i++){
                    @if (mensagens[i].Autor == null)
                    {
                        <div class="question">@mensagens[i].Content</div>
                    }else{
                        <div class="response">@mensagens[i].Content</div>
                    }
                }  
            </div>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Digite uma mensagem" @bind="message" autocomplete="off">
                <button class="btn btn-primary" @onclick="SendMessage"><i class="bi bi-send"></i></button>
            </div>
        </div>
        <div class="col-3"></div>
    </div>
</div>
<script src="../wwwroot/lib/dist/js/bootstrap.js" ></script>

@code {
    public string message;
    public List<Message> mensagens = new List<Message>();
    private static HttpClient Http = new HttpClient();
    const string BaseUrl = "https://api.openai.com/v1/chat/completions";
    private string apiKey = "";
    public string ErrorMessage = "";
    bool isShow { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task SendMessage()
    {
        try
        {
            Assistant ChatBot = new Assistant();
            {
                ChatBot.bearer = apiKey;
            }

            Message mensagem = new Message();
            {
                mensagem.Id = "Cliente";
                mensagem.Created = DateTime.Now;
                mensagem.Content = message;
                mensagem.Total_tokens = 0;
                mensagem.Autor = null;
            }

            await ChatBot.EnviaMensagem(mensagem);



            // Http = new HttpClient();
            // Http.BaseAddress = new Uri(BaseUrl);

            // Message mensagem = new Message();
            // {
            //     mensagem.Id = "Cliente";
            //     mensagem.Created = DateTime.Now;
            //     mensagem.Content = message;
            //     mensagem.Total_tokens = 0;
            //     mensagem.Autor = null;
            // }

            // Seta a API KEY
            //Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

            // Conteúdo JSON para a chamada        
            // string jsonContent = JsonConvert.SerializeObject(new
            // {
            //     model = "gpt-3.5-turbo-0125",
            //     messages = new[]
            //     {
            //     new {role = "user", content = $"{message}"},
            //     new {role = "system", content = $"Responda tudo como se fosse uma enfermeira"}
            //     },
            // });

            // message = null; //Apaga o que foi preenchido no campo da mensagem após o envio

            // var body = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");

            // // Faz o POST pra API, passando o JSON serializado
            // var response = await Http.PostAsync("", body);

            // // Recebe a resposta
            // var resContext = await response.Content.ReadAsStringAsync();

            // // Desserializa o JSON da resposta
            // var data = JsonConvert.DeserializeObject<dynamic>(resContext);

            // if (response.IsSuccessStatusCode)
            // {
            //     Message mensagemBot = new Message();
            //     {
            //         mensagemBot.Id             = data.id;
            //         mensagemBot.Created        = DateTime.Now;
            //         mensagemBot.Content        = data.choices[0].message.content;
            //         mensagemBot.Total_tokens   = data.usage.total_tokens;
            //         mensagemBot.Autor          = "ChatBot";
            //     }

            //     mensagens.Add(mensagemBot); //Insere a resposta na tela usando a string do objeto Mensagem
            //     Console.WriteLine(mensagemBot.ToString());
            //     ErrorMessage = "";
            //     isShow = false;
            //     StateHasChanged();
            // }
            // else
            // {
            //     isShow = true;
            //     Console.WriteLine($"Erro da API: {data.error.message}");
            //     ErrorMessage = data.error.message;
            //     await ChangeApiKey();
            // }
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    private async Task SetApikey()
    {
        apiKey = apiKey;
        StateHasChanged();
    }

    private async Task ChangeApiKey()
    {
        apiKey = null;
        StateHasChanged();
    }
}
