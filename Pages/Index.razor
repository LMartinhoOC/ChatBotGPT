@using ChatGPTChatBot.Data
@using ChatGPTChatBot.Persistence
@using ChatGPTChatBot.Persistence.Interface
@using Newtonsoft.Json;
@using System.Text;
@inject IJSRuntime JSRuntime;
@inject ILocalStorageService _localstorage;

@page "/"

<PageTitle>Chatbot</PageTitle>
<div class="container">
    <div class="row">
        <div class="col-4">
            <h2>Projeto TCC - Unicarioca</h2>
            <p>Este projeto se trata de um ChatBot que utiliza a API do ChatGPT (GPT-4 TURBO). A ideia do projeto é a criação de um 'assistente'
                para um atendimento médico. Um chat com uma inteligência artificial que pode fazer um <i>briefing</i> para auxiliar um profissional
                de saúde a fazer um diagnostico e tratamento.
            </p>
            <hr class="my-4"/>
            <p>
                O uso da API é cobrado por requisição, para mais informações, acesse o <i>link</i>:
                <a href="https://platform.openai.com/docs/api-reference">https://platform.openai.com/docs/api-reference</a>.</p>
            <p>Caso possua uma API Key, insira-a no campo abaixo, para poder fazer as chamadas ao ChatBot:</p>

            @if(apiKey == null || apiKey == "")
            {
                <div class="input-group" id="AddKey">
                    <input type="password" id="ApiSecretKey" autocomplete="false" name="hidden" class="form-control" placeholder="Digite sua API Secret Key" @bind="apiKey" aria-label="Digite sua API Secret Key">
                    <button class="btn btn-primary" @onclick="SetApikey">Confirmar</button>
                </div>
            }
            else
            {
                <div class="input-group" id="ChangeKey">
                    <input disabled type="password" id="ApiSecretKey" class="form-control" @bind="apiKey" aria-label="Digite sua API Secret Key">
                    <button class="btn btn-outline-primary" @onclick="ChangeApiKey">Alterar</button>
                </div>
            }
            @if (isShow)
            {
                <div class="alert-danger px-2">
                    <strong>Erro: </strong>@ErrorMessage
                </div>
            }
        </div>
        <div class="col-8">
            <div class="messages">
                @for (int i = 0; i < mensagens.Count; i++){
                    @if (mensagens[i].Autor != null)
                    {
                        <div class="response">@mensagens[i].Content</div>
                    }else{
                        <div class="question">@mensagens[i].Content</div>
                    }
                }  
            </div>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Digite uma mensagem" @bind="message" autocomplete="off">
                <button class="btn btn-primary" @onclick="CallStreamMessage"><i class="bi bi-send"></i></button>
            </div>
        </div>
    </div>
    <div class="row pt-5">
        <div class="col-sm-4">
            <div class="card">
                @* <img class="card-img-top" src="https://media.licdn.com/dms/image/C4E03AQFxgrejbht1XA/profile-displayphoto-shrink_800_800/0/1601684195714?e=1720656000&v=beta&t=tpznt5ftGuNqqWNQi5EsoWCzWsi4-gUAz2mndfSlxks" /> *@
                <div class="card-body">
                    <h3 class="card-title">Luiz Martinho</h3>
                    <h5 class="card-subtitle">Desenvolvimento / Pesquisa</h5>
                    <p class="card-text pt-1">
                        Ciência da computação<br />
                        <a href="https://www.linkedin.com/in/luiz-martinho-64aa5218a/"><h2 class="bi bi-linkedin"></h2></a>
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="card">
               @*  <img class="card-img-top" src="https://media.licdn.com/dms/image/C4E03AQGVAXhKx1CKGw/profile-displayphoto-shrink_800_800/0/1654623133162?e=1720656000&v=beta&t=ybeT-ioRfRFPh96Rc3BaEtdaMCwksyUJ4QgvXvU21oM" /> *@
                <div class="card-body">
                    <h3 class="card-title">Leonardo Pereira</h3>
                    <h5 class="card-subtitle">Organização / Pesquisa</h5>
                    <p class="card-text pt-1">
                        Ciência da computação<br />
                        <a href="https://www.linkedin.com/in/leonardom-pereira/"><h2 class="bi bi-linkedin"></h2></a>
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="card">
                @* <img class="card-img-top" src="https://media.licdn.com/dms/image/C4E35AQHPBvXz8TSKWA/profile-framedphoto-shrink_800_800/0/1619728282475?e=1715475600&v=beta&t=F8YjJvMZxSCYnQZidKxnpZ3ztchbdlvQocWwzZ28mUo" /> *@
                <div class="card-body">
                    <h3 class="card-title">Christian Vazquez</h3>
                    <h5 class="card-subtitle">Pesquisa / Pocumentação</h5>
                    <p class="card-text pt-1">
                        Análise de sistemas<br />
                        <a href="https://www.linkedin.com/in/christianvazquez01/"><h2 class="bi bi-linkedin"></h2></a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="../wwwroot/lib/dist/js/bootstrap.js" ></script>

@code {
    public string message;
    public List<Message> mensagens = new List<Message>();
    private static HttpClient Http = new HttpClient();
    const string BaseUrl = "https://api.openai.com/v1/chat/completions";
    private string apiKey = "";
    public string ErrorMessage = "";
    bool isShow { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task SendMessage()
    {
        try
        {
            Assistant ChatBot = new Assistant();
            {
                ChatBot.bearer = apiKey;
            }

            Message mensagem = new Message();
            {
                mensagem.Id = "Cliente";
                mensagem.Created = DateTime.Now;
                mensagem.Content = message;
                mensagem.Total_tokens = 0;
                mensagem.Autor = null;
            }

            var resposta = ChatBot.EnviaMensagem(mensagem);

            mensagens.Add(mensagem);
            mensagens.Add(await resposta);
            message = "";
            StateHasChanged();
        }
        catch(Exception e)
        {
            mensagens.RemoveAt(mensagens.Count - 1);
            ErrorMessage = e.Message;
            isShow = true;
            await ChangeApiKey();
        }

    }

    public async Task CallStreamMessage()
    {
        try
        {
            Assistant ChatBot = new Assistant();
            {
                ChatBot.bearer = apiKey;
            }

            Message mensagem = new Message();
            {
                mensagem.Id = "Cliente";
                mensagem.Created = DateTime.Now;
                mensagem.Content = message;
                mensagem.Total_tokens = 0;
                mensagem.Autor = null;
            }

            var resposta = await ChatBot.StreamMensagens(mensagem);
        }
        catch(Exception e)
        {
            mensagens.RemoveAt(mensagens.Count - 1);
            ErrorMessage = e.Message;
            isShow = true;
            await ChangeApiKey();
        }
    }

    private async Task SetApikey()
    {
        apiKey = apiKey;
        StateHasChanged();
    }

    private async Task ChangeApiKey()
    {
        apiKey = null;
        StateHasChanged();
    }
}
