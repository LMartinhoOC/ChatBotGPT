@using ChatGPTChatBot.Data
@using ChatGPTChatBot.Persistence
@using ChatGPTChatBot.Persistence.Interface
@using Newtonsoft.Json;
@using System.Text;
@inject IJSRuntime JSRuntime;

@page "/"

<PageTitle>Chatbot</PageTitle>
<div class="container">
    <div class="row">
        <div class="col-4">
            <h2>Projeto TCC - Unicarioca</h2>
            <p>Este projeto se trata de um ChatBot que utiliza a API do ChatGPT (GPT-4 TURBO). A ideia do projeto é a criação de um 'assistente'
                para um atendimento médico. Um chat com uma inteligência artificial que pode fazer um <i>briefing</i> para auxiliar um profissional
                de saúde a fazer um diagnostico e tratamento.
            </p>
            <hr class="my-4"/>
            @if(apiKey == null || apiKey == "")
            {
            <div class="info rounded-2 p-2">
                <p>
                    O uso da API é cobrado por requisição, para mais informações, acesse o <i>link</i>:
                    <a href="https://platform.openai.com/docs/api-reference">https://platform.openai.com/docs/api-reference</a>.
                </p>
                <p>Caso possua uma API Key, insira-a no campo abaixo, para poder fazer as chamadas ao ChatBot:</p>
                <div class="input-group" id="AddKey">
                    <input type="password" id="ApiSecretKey" autocomplete="false" name="hidden" class="form-control" placeholder="Digite sua API Secret Key" @bind="apiKey" aria-label="Digite sua API Secret Key">
                    <button class="btn btn-primary" @onclick="SetApikey">Confirmar</button>
                </div>
            </div>
            }
            else
            {
                <div class="input-group" id="ChangeKey">
                    <input disabled type="password" id="ApiSecretKey" class="form-control" @bind="apiKey" aria-label="Digite sua API Secret Key">
                    <button class="btn btn-outline-primary" @onclick="ChangeApiKey">Alterar</button>
                </div>
                @if (resultado != null)
                {
                    <div class="flex-column d-flex pb-5 border-0 rounded my-4 bg-dark">
                        <div class="p-2 text-white"><b>Diagnóstico prévio</b></div>
                        <div class="px-2 text-white">@resultado</div>
                    </div>
                }
            }
            @if (ErrorMessage != null)
            {
                <div class="alert-danger px-2">
                    <strong>Erro: </strong>@ErrorMessage
                </div>
            }
        </div>
        <div class="col-8">
            <div class="messages">
                @for (int i = 0; i < mensagens.Count; i++){
                    @if (mensagens[i].Autor != null)
                    {
                        <div class="question">@mensagens[i].Content</div>
                    }else{
                        <div class="response">@mensagens[i].Content</div>
                    }
                }  
            </div>
            <div class="flex-grow-0">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Digite uma mensagem" @bind-value="message" @bind-value:event="oninput" @onkeydown="@Enter" autocomplete="off">
                    <button class="btn btn-primary" @onclick="SendMessage"><i class="bi bi-send"></i></button>
                </div> 
            </div>
        </div>
    </div>
</div>
<div class="container">
    <div class="row pt-5">
        <div class="col-sm-4">
            <div class="card">
                
                <div class="card-body">
                    <h3 class="card-title">Luiz Martinho</h3>
                    <h5 class="card-subtitle">Desenvolvimento / Pesquisa</h5>
                    <p class="card-text pt-1">
                        Ciência da computação<br />
                        <a class="link-opacity-25-hover link-underline-opacity-0" href="https://www.linkedin.com/in/luiz-martinho-64aa5218a/"><i class="bi bi-linkedin"></i></a>
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="card">
               
                <div class="card-body">
                    <h3 class="card-title">Leonardo Pereira</h3>
                    <h5 class="card-subtitle">Pesquisa / Organização</h5>
                    <p class="card-text pt-1">
                        Ciência da computação<br />
                        <a class="link-opacity-25-hover link-underline-opacity-0" href="https://www.linkedin.com/in/leonardom-pereira/"><i class="bi bi-linkedin"></i></a>
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="card">
                
                <div class="card-body">
                    <h3 class="card-title">Christian Vazquez</h3>
                    <h5 class="card-subtitle">Pesquisa / Documentação</h5>
                    <p class="card-text pt-1">
                        Análise de sistemas<br />
                        <a class="link-opacity-25-hover" href="https://www.linkedin.com/in/christianvazquez01/"><i class="bi bi-linkedin"></i></a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="../wwwroot/lib/dist/js/bootstrap.js" ></script>

@code {
    public string message = "";
    public List<Message> mensagens = new List<Message>();
    public string resultado;
    const string BaseUrl = "https://api.openai.com/v1/chat/completions";
    private string apiKey = "";
    public string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task SendMessage()
    {
        try
        {
            ErrorMessage = null;
            AssistantService ChatBot = new AssistantService();
            {
                ChatBot.Bearer = apiKey;
            }

            Message mensagem = new Message();
            {
                mensagem.Id = "Cliente";
                mensagem.Created = DateTime.Now;
                mensagem.Content = message;
                mensagem.Total_tokens = 0;
                mensagem.Autor = "Humano";
            }

            var resposta = ChatBot.EnviaMensagem(mensagem, mensagens);

            mensagens.Add(mensagem);

            message = "";

            mensagens.Add(await resposta);
            Message diagnostico = await ChatBot.GeraDiagnostico(mensagens);

            if(mensagens.Count > 2)
            {
                resultado = diagnostico.Content;
            }
            StateHasChanged();
        }
        catch(Exception e)
        {
            mensagens.RemoveAt(mensagens.Count - 1);
            ErrorMessage = e.Message;
            await ChangeApiKey();
        }

    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if(message != "")
            {
                SendMessage();
            }
        }
    }

    public void ConfirmaInput(KeyboardEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task SetApikey()
    {
        apiKey = apiKey;
        StateHasChanged();
    }

    private async Task ChangeApiKey()
    {
        apiKey = null;
        StateHasChanged();
    }
}
